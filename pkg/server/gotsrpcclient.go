// Code generated by gotsrpc https://github.com/foomo/gotsrpc  - DO NOT EDIT.

package server

import (
	net_http "net/http"

	gotsrpc "github.com/foomo/gotsrpc"
	github_com_foomo_webgrapple_vo "github.com/foomo/webgrapple/pkg/vo"
)

type ServiceGoTSRPCClient interface {
	Remove(serviceIDs []github_com_foomo_webgrapple_vo.ServiceID) (err *github_com_foomo_webgrapple_vo.ServiceError, clientErr error)
	Upsert(services []*github_com_foomo_webgrapple_vo.Service) (err *github_com_foomo_webgrapple_vo.ServiceError, clientErr error)
}

type HTTPServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultServiceGoTSRPCClient(url string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClient(url, "/___webgrapple-service")
}

func NewServiceGoTSRPCClient(url string, endpoint string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewServiceGoTSRPCClientWithClient(url string, endpoint string, client *net_http.Client) *HTTPServiceGoTSRPCClient {
	return &HTTPServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPServiceGoTSRPCClient) Remove(serviceIDs []github_com_foomo_webgrapple_vo.ServiceID) (err *github_com_foomo_webgrapple_vo.ServiceError, clientErr error) {
	args := []interface{}{serviceIDs}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Remove", args, reply)
	return
}

func (tsc *HTTPServiceGoTSRPCClient) Upsert(services []*github_com_foomo_webgrapple_vo.Service) (err *github_com_foomo_webgrapple_vo.ServiceError, clientErr error) {
	args := []interface{}{services}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Upsert", args, reply)
	return
}
