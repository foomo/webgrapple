// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package server

import (
	go_context "context"
	go_net_http "net/http"

	gotsrpc "github.com/foomo/gotsrpc/v2"
	github_com_foomo_webgrapple_pkg_vo "github.com/foomo/webgrapple/pkg/vo"
	pkg_errors "github.com/pkg/errors"
)

type ServiceGoTSRPCClient interface {
	Remove(ctx go_context.Context, serviceIDs []github_com_foomo_webgrapple_pkg_vo.ServiceID) (err *github_com_foomo_webgrapple_pkg_vo.ServiceError, clientErr error)
	Upsert(ctx go_context.Context, services []*github_com_foomo_webgrapple_pkg_vo.Service) (err *github_com_foomo_webgrapple_pkg_vo.ServiceError, clientErr error)
}

type HTTPServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultServiceGoTSRPCClient(url string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClient(url, "/___webgrapple-service")
}

func NewServiceGoTSRPCClient(url string, endpoint string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewServiceGoTSRPCClientWithClient(url string, endpoint string, client *go_net_http.Client) *HTTPServiceGoTSRPCClient {
	return &HTTPServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPServiceGoTSRPCClient) Remove(ctx go_context.Context, serviceIDs []github_com_foomo_webgrapple_pkg_vo.ServiceID) (err *github_com_foomo_webgrapple_pkg_vo.ServiceError, clientErr error) {
	args := []interface{}{serviceIDs}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "Remove", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call server.ServiceGoTSRPCProxy Remove")
	}
	return
}

func (tsc *HTTPServiceGoTSRPCClient) Upsert(ctx go_context.Context, services []*github_com_foomo_webgrapple_pkg_vo.Service) (err *github_com_foomo_webgrapple_pkg_vo.ServiceError, clientErr error) {
	args := []interface{}{services}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "Upsert", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call server.ServiceGoTSRPCProxy Upsert")
	}
	return
}
